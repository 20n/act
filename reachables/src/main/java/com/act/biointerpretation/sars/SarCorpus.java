package com.act.biointerpretation.sars;

import java.io.IOException;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Optional;

public class SarCorpus implements Iterable<CharacterizedGroup> {

  Iterable<SeqGroup> enzymeGroups;
  SarGenerator generator;
  Collection<CharacterizedGroup> characterizedGroups;

  public SarCorpus(Iterable<SeqGroup> enzymeGroups, SarGenerator generator) {
    this.enzymeGroups = enzymeGroups;
    this.generator = generator;
    characterizedGroups = new HashSet<>();
  }

  /**
   * Builds SAR corpus by applying the SarGenerator to every supplied SeqGroup that it can.
   */
  public void buildSarCorpus() throws IOException {
    for (SeqGroup group : enzymeGroups) {
      Optional<Sar> sar = generator.getSar(group);
      if (sar.isPresent()) {
        characterizedGroups.add(new CharacterizedGroup(group, sar.get()));
      }
    }
  }

  /**
   * Returns an iterator over the characterized groups generated by this corpus.
   *
   * @return
   */
  @Override
  public Iterator<CharacterizedGroup> iterator() {
    return characterizedGroups.iterator();
  }
}
