package com.act.biointerpretation.sars;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Optional;

public class SarCorpus implements Iterable<CharacterizedGroup> {

  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();

  static {
    OBJECT_MAPPER.enable(SerializationFeature.INDENT_OUTPUT);
  }

  private static final Logger LOGGER = LogManager.getFormatterLogger(SarCorpus.class);

  Iterable<SeqGroup> enzymeGroups;
  EnzymeGroupCharacterizer characterizer;

  @JsonProperty
  Collection<CharacterizedGroup> characterizedGroups;

  public SarCorpus(Iterable<SeqGroup> enzymeGroups, EnzymeGroupCharacterizer characterizer) {
    this.enzymeGroups = enzymeGroups;
    this.characterizer = characterizer;
    characterizedGroups = new HashSet<>();
  }

  /**
   * Builds SAR corpus by applying the EnzymeGroupCharacterizer to every supplied SeqGroup that it can.
   */
  public void buildSarCorpus() throws IOException {
    int counter = 0;
    for (SeqGroup group : enzymeGroups) {
      if (counter % 100 == 0) {
        LOGGER.info("On group %d, characterized %d so far.", counter, characterizedGroups.size());
      }

      Optional<CharacterizedGroup> characterization = characterizer.characterizeGroup(group);
      if (characterization.isPresent()) {
        characterizedGroups.add(characterization.get());
      }
      counter++;
    }
  }

  public void printToJsonFile(File outputFile) throws IOException {
    try (BufferedWriter predictionWriter = new BufferedWriter(new FileWriter(outputFile))) {
      OBJECT_MAPPER.writeValue(predictionWriter, this);
    }
  }

  /**
   * Returns an iterator over the characterized groups generated by this corpus.
   *
   * @return The iterator.
   */
  @Override
  public Iterator<CharacterizedGroup> iterator() {
    return characterizedGroups.iterator();
  }
}
