*  This package is a sidebar project alongside the cofactors package to ultimately
   be used in the mechanisminspection phase of database cleaning

*  The goal of the package is to construct a first-pass set of reaction operators,
   curate them, and make them available as an oracle to the MechanisticCleaner

*  This code is a daisy chain of running analyses over the database, generating data, curating,
    then feeding that back into the next step.  So, it's complicated.  I will try to describe the
    sequence of events.

***********************
Core Algorithmic Pieces:
***********************

SkeletonMapper and ChangeMapper
*   These are for generating Atom-To-Atom mappings of a reaction.  ChangeMapper just does the
    appropriate ChemAxon AutoMapper
*   SkeletonMapper first maps the carbon backbone, then the
    first shell of heteroatoms, then the rest of the molecule.

SubstructureMatcher
*   This is used by SkeletonMapper

OperatorExtractor
*   Calculates the various types of h*ERO and h*CRO's for a mapped reaction
*   The explanation of the different RO types is at:  https://github.com/20n/act/issues/107
*   ROExtractor_old is vestigial code
*   ROProjector I think is functioning code not used in this project, and will likely be moved


ReactionInterpretation
*   A representation of a reaction with it's cofactors pulled out, it's mapping, and its ROs
*   During CrawlAndHmERO, these all get dumped to disk
*   Files are human-readable, and parsed and exported with toString and parse methods

ChemAxonUtils.getReactionHash(RxnMolecule cro)
*   Calculates a hash code for a reaction
*   Converts everything to single substrate and product Molecule
*   Dumps it as a String of inchi >> inchi
*   Works on concrete and abstract reactions
*   When saved to disk, I create a SHA1 hash of this to avoid illegal characters

***********************
Analysis:
***********************

Notes
* This is my best attempt at reconstituting the flow of the analysis
* I don't recall the distinction between the three CompareRO classes and where each was used (if used)

1. CrawlAndAbstract
*  This crawls through the database and hashes up all the hcEROs observed
*  It was run on synapse, which is the db that's gone through ReactionMerging and Desalting

2. CompareROs
*  Separates the ERO information into separate MetaCyc and BRENDA collections
*  It compares the two collection and only retains those hcEROs present at least twice in each source db

3. CrawlMapAndSave
*  Goes back through all the reactions that survive CompareROs and calculates mappings and persists them on disk
*  It does it with both SkeletonMapper and ChangeMapper
*  It dumps a bunch of files on the hardrive that are serialized objects as files

4.  CrawlAndHmERO
*  Scans through all the mapping files from previous and creates a directory of files called output/hmERO
*  this output directory is organized by CRO>hmERO>hcERO>reactions
*  Currently I have only processed the SkeletonMapper-derived mappings, because ChangeMap generates too much crap
*  This will result in loss of carbon-carbon altering reactions, but can curate them back later

5. OperatorGUIHelper and OperatorGUI
*  To run, run OperatorGUIHelper which will initialize the GUI
*  OperatorGUI is the GUI, the Helper is a controller
*  Helper examines the data generated by CrawlAndHmERO and prioritizes things for curation
*  Curation involves generating JSON files using another GUI (launched from OperatorGUI) called utils/JSONFileEditor
*  The JSON files are dumped in the terminal CRO>hmERO>hcERO>reactions path
*  I curated the top 450 reactions, which took me down to the middle of ROs with only 2 examples
*  I was still seeing good data after 450.
*  The SkeletonMapper is a strong constraint for a good reaction. Very few are wrong.

6. ConsolidateCuration
*  Goes through the hmERO directory and pulls out all the JSON, the hcERO, and the directory location
*  It enumerates all the keys observed in the JSON (it println's them)
*  Those keys mean things to me, and their values will be used in next steps, but they are all generated by curation
*  A copy of the hmERO data including all the curated JSON is on the Dropbox at:
    Dropbox\ \(20n\)/20n\ Team\ Folder/act_data/2015_12_21-hmEROs.zip

*  The key list was:
confidence
validation
name
note
cyclase
hydrate
trim
cofactor
aam
nro
twotimes
twosites
error
NRO
mixed_products
twostep
glucosyltransferase
desalting
tirm
tautomer
stereo
coenzyme

7.  Cofactor Curation
*  The previous also generates a file of potential cofactors (inspection of cofactor key in json) called:
        output/potentialCofactors.txt
*  I curated all the chems in that file and put in good names for each real cofactor
*  A copy of the curated output is at: Dropbox\ \(20n\)/20n\ Team\ Folder/act_data/potentialCofactors.txt
*  I combined the new cofactors from this curation with the old ones (Dropbox\ \(20n\)/20n\ Team\ Folder/act_data/cofactor_data.txt)
*  The combined file is:
        Dropbox\ \(20n\)/20n\ Team\ Folder/act_data/2015_12_21-Cofactors.txt
*  I added a column in that file where I prioritize each cofactor as 1, 2, or 3
    1:  This is almost always a cofactor and does little else (ie, ATP)
    2:  This is a well=recognized cofactor, but it also shows up in reactions that are about something else (nucleotide sugars)
    3:  These are only sometimes cofactors (glutamine)
*  It is not a strict thing, just a heuristic for correctly pulling out cofactors in the MechanisticValidator
*  I will copy this file into the /data/ folder to pull from it in the codebase

8.  Test-Set Generation
(not written yet)
*   Pulls reaction list for all validated reactions (plus a few other caveots)
*   Generated by ConsolidateCuration.generateTestSet() method

9.  MechanisticValidator
(not written yet)

